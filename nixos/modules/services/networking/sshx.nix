{ config, lib, pkgs, ... }:
let
  cfg = config.services.sshx;
  inherit (lib) types;
in
{
  options.services.sshx = {
    enable = lib.mkEnableOption (lib.mdDoc "sshx, a secure web-based, collaborative terminal.");

    package = lib.mkPackageOptionMD pkgs "sshx-server" { };

    nginx.enable = lib.mkEnableOption (lib.mdDoc ''
      NGINX for virtual host management.
      The virtual host will be named according to `services.sshx.settings.hostName`.
      Further NGINX configuration can be done by adapting `services.nginx.virtualHosts.<name>`.
      See [](#opt-services.nginx.virtualHosts) for further information.
    '');

    caddy.enable = lib.mkEnableOption (lib.mdDoc ''
      Caddy for virtual host management.
      The virtual host will be named according to `services.sshx.settings.hostName`.
      Further Caddy configuration can be done by adapting `services.caddy.virtualHosts.<name>`.
      See [](#opt-services.caddy.virtualHosts) for further information.
    '');

    settings = {
      port = lib.mkOption {
        type = types.port;
        default = 8051;
        example = 2222;
        description = lib.mdDoc "The port for `sshx-server` to listen on.";
      };

      listenAddress = lib.mkOption {
        type = types.str;
        default = "127.0.0.1";
        example = "0.0.0.0";
        description = lib.mdDoc "The IP address or network interface for `sshx-server` to listen on.";
      };

      signingSecret = lib.mkOption {
        type = types.nullOr types.path;
        default = null;
        example = "/etc/sshx/secret";
        description = lib.mdDoc ''
          Secret used for signing session tokens.
          The file must be in the format of 'SSHX_SECRET=<THE_ACTUAL_SECRET>'.
          If null, a random secret will be automatically generated by `sshx-server`.
        '';
      };

      hostName = lib.mkOption {
        type = types.str;
        default = config.networking.hostName;
        defaultText = lib.literalExpression "config.networking.hostName";
        example = "example.com";
        description = lib.mdDoc ''
          The hostname/domain of sshx instance.
          This will be used as virtual host name if `services.sshx.nginx.enable` or `services.sshx.caddy.enable` are used.
        '';
      };
    };
  };

  config = lib.mkIf cfg.enable {
    users.users.sshx = {
      group = "sshx";
      isSystemUser = true;
    };

    users.groups.sshx = { };

    services.redis.servers.sshx = {
      enable = true;
      user = "sshx";
    };

    systemd.services.sshx = {
      description = "sshx, a secure web-based, collaborative terminal";
      wantedBy = [ "multi-user.target" ];
      requires = [ "network.target" "redis-sshx.service" ];
      after = [ "network.target" "redis-sshx.service" ];
      serviceConfig = {
        User = "sshx";
        Group = "sshx";
        EnvironmentFile = lib.mkIf (cfg.settings.signingSecret != null) cfg.settings.signingSecret;
        ExecStart = ''${lib.getExe cfg.package} ${lib.escapeShellArgs [
          "--port" (toString cfg.settings.port)
          "--listen" cfg.settings.listenAddress
          "--host" cfg.settings.hostName
          "--redis-url" "redis+unix://${config.services.redis.servers.sshx.unixSocket}"
        ]}'';

        # Hardening
        ProtectSystem = "strict";
        AmbientCapabilities = if (cfg.settings.port <= 1024) then [ "CAP_NET_BIND_SERVICE" ] else "";
        CapabilityBoundingSet = if (cfg.settings.port <= 1024) then [ "CAP_NET_BIND_SERVICE" ] else "";
        DeviceAllow = "";
        LockPersonality = true;
        NoNewPrivileges = true;
        MemoryDenyWriteExecute = true;
        RemoveIPC = true;
        PrivateTmp = true;
        PrivateMounts = true;
        PrivateDevices = true;
        PrivateUsers = (cfg.settings.port >= 1024);
        ProtectClock = true;
        ProtectControlGroups = true;
        ProtectHome = true;
        ProtectHostname = true;
        ProtectKernelLogs = true;
        ProtectKernelModules = true;
        ProtectKernelTunables = true;
        ProtectProc = "invisible";
        ProcSubset = "pid";
        RestrictAddressFamilies = [ "AF_INET" "AF_INET6" "AF_UNIX" ];
        RestrictNamespaces = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
        SystemCallArchitectures = "native";
        SystemCallFilter = [ "@system-service" "~@privileged" "~@resources" ];
        UMask = "0077";
      };
    };

    services.nginx = lib.mkIf cfg.nginx.enable {
      enable = true;
      virtualHosts.${cfg.settings.hostName} = {
        locations = {
          "/" = {
            proxyPass = "http://${cfg.settings.listenAddress}:${toString cfg.settings.port}";
            proxyWebsockets = true;
          };
          "/sshx.SshxService/Channel".extraConfig = ''
            grpc_pass grpc://${cfg.settings.listenAddress}:${toString cfg.settings.port};
          '';
        };
      };
    };

    services.caddy = lib.mkIf cfg.caddy.enable {
      enable = true;
      virtualHosts.${cfg.settings.hostName} = {
        extraConfig = ''
          handle {
              reverse_proxy http://${cfg.settings.listenAddress}:${toString cfg.settings.port}
          }
          handle /sshx.SshxService/Channel {
              reverse_proxy h2c://${cfg.settings.listenAddress}:${toString cfg.settings.port}
          }
        '';
      };
    };
  };

  meta.maintainers = with lib.maintainers; [ kranzes ];
}
